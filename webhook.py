# webhook.py
import os
import glob
import traceback
import dotenv; dotenv.load_dotenv()
from flask import Flask, request, jsonify
import requests
from run_tutorial import generate_tutorial

app = Flask(__name__)

# Bitbucket credentials (must have repo read/write on the target repo)
BB_USER     = os.getenv("BB_USER")
BB_APP_PASS = os.getenv("BB_APP_PASS")

OUTPUT_DIR    = os.getenv("OUTPUT_DIR", "output")
TUTORIAL_LANG = os.getenv("TUTORIAL_LANG", "english")

@app.route("/payload", methods=["GET", "POST"])
def payload():
    if request.method == "GET":
        return "OK", 200

    try:
        event_key = request.headers.get("X-Event-Key", "")
        if event_key not in ("pullrequest:created", "pullrequest:updated"):
            return jsonify({"msg": f"Ignoring event: {event_key}"}), 200

        data = request.get_json(force=True, silent=True)
        if not data:
            return "No JSON payload received", 400

        pr        = data["pullrequest"]
        branch    = pr["source"]["branch"]["name"]
        src_repo  = pr["source"]["repository"]
        owner, slug = src_repo["full_name"].split("/", 1)

        clone_url = (
            f"https://{BB_USER}:{BB_APP_PASS}@bitbucket.org/{owner}/{slug}.git"
        )

        tutorial_dir = generate_tutorial(
            repo_url=clone_url,
            output=OUTPUT_DIR,
            language=TUTORIAL_LANG
        )

        md_paths = sorted(glob.glob(os.path.join(tutorial_dir, "*.md")))
        if not md_paths:
            raise RuntimeError("No tutorial markdown produced")

        files = {}
        for path in md_paths:
            name = os.path.basename(path)
            if name.lower() == "index.md":
                continue
            repo_path = f"tutorials/{name}"
            with open(path, encoding="utf-8") as f:
                files[repo_path] = f.read()

        post_url  = f"https://api.bitbucket.org/2.0/repositories/{owner}/{slug}/src"
        data_post = {
            "branch":  branch,
            "message": "ðŸ¤– Add autogenerated tutorial files"
        }

        print("POSTing tutorial files to:", post_url)
        print("Branch:", branch, "Files:", list(files.keys()))

        resp = requests.post(
            post_url,
            auth=(BB_USER, BB_APP_PASS),
            data=data_post,
            files=files
        )
        print("Bitbucket response:", resp.status_code, resp.text)
        resp.raise_for_status()

        return jsonify({"msg": "Tutorial files added"}), 200

    except Exception as e:
        print("Exception in webhook handler:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(
        host="0.0.0.0",
        port=int(os.getenv("PORT", 5050)),
        debug=True
    )
